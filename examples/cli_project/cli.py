#!/usr/bin/env python3
"""
Command-Line Interface and Argument Parsing

This module handles all command-line argument parsing, validation,
and logging configuration for the application.

Generated by: Go-ish Python Scaffolder
Author: YamaÃ§ Eren Ay
Modification Guidelines:
- Add new arguments to build_parser()
- Implement validation in validate_args()
- Update parse_args_to_config() for new config fields
- Use argparse for consistent CLI patterns
"""

from __future__ import annotations
from typing import TYPE_CHECKING
import argparse
import os
import sys
import logging

if TYPE_CHECKING:
    from .config import AppConfig

# Smart import for config
try:
    from .config import create_config
except ImportError:
    sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
    from config import create_config

def build_parser() -> argparse.ArgumentParser:
    """Build and configure the argument parser."""
    parser = argparse.ArgumentParser(
        prog="cli_project",
        description="CLI Tool"
    )
    
    parser.add_argument(
        "command",
        choices=["run", "process", "status"],
        help="Command to execute"
    )
    
    parser.add_argument(
        "--config-file",
        type=str,
        help="Path to configuration file"
    )
    
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="Enable verbose logging"
    )
    
    parser.add_argument(
        "--output-dir",
        type=str,
        default="./output",
        help="Output directory"
    )
    
    return parser

def configure_logging(verbose: bool = False) -> None:
    """Configure application logging."""
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

def validate_args(args: argparse.Namespace) -> None:
    """Validate command line arguments."""
    valid_commands = ["run", "process", "status"]
    if args.command not in valid_commands:
        raise ValueError(f"Invalid command: {args.command}. Must be one of: {valid_commands}")

def parse_args_to_config(args: argparse.Namespace) -> "AppConfig":
    """Convert parsed arguments to application configuration."""
    return create_config(
        app_name="cli_project",
        output_dir=args.output_dir,
        verbose=args.verbose,
        config_file=args.config_file
    )
