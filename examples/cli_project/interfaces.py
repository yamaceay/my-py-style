#!/usr/bin/env python3
"""
Abstract Base Classes (Interface Definitions)

This module defines the core contracts for the application using ABC patterns.
All interfaces follow the principle of minimal, focused responsibilities.

Generated by: Go-ish Python Scaffolder
Author: {self.config.author}
Modification Guidelines:
- Add new interfaces following ABC pattern
- Keep interfaces minimal and focused
- Use @abstractmethod for all required methods
- Avoid implementation details in interfaces
"""

from __future__ import annotations
from abc import ABC, abstractmethod
from typing import Any

class Processor(ABC):
    @abstractmethod
    def process(self, data: Any) -> Any:
        pass

class Handler(ABC):
    @abstractmethod
    def handle(self, request: Any) -> Any:
        pass

class Repository(ABC):
    @abstractmethod
    def save(self, entity: Any) -> bool:
        pass
    
    @abstractmethod
    def find(self, identifier: str) -> Any:
        pass

class Service(ABC):
    @abstractmethod
    def execute(self, params: Any) -> Any:
        pass
